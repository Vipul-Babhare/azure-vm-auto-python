name: 🚀 Azure VM Auto Deploy & Train Model

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v3

    - name: ⚙️ Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: 🔐 Azure Login using Service Principal
      run: |
        az login --service-principal \
          --username ${{ secrets.ARM_CLIENT_ID }} \
          --password ${{ secrets.ARM_CLIENT_SECRET }} \
          --tenant ${{ secrets.ARM_TENANT_ID }}

    - name: 📦 Terraform Init
      run: terraform init

    - name: 📌 Terraform Apply
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_ssh_public_key: ${{ secrets.AZURE_SSH_PUBLIC_KEY }}

    - name: 🌍 Extract Public IP
      run: |
        echo "VM_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV

    - name: 🕒 Wait for SSH Port
      run: sleep 30

    - name: 🔑 Write SSH Private Key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

    - name: 🧲 Clone Repo & Install Python Deps
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          git clone https://github.com/Vipul-Babhare/azure-vm-auto-python.git || true
          cd azure-vm-auto-python
          sudo apt update
          sudo apt install -y python3-pip
          pip3 install --upgrade pip
          pip3 install --no-cache-dir -r requirements.txt --timeout 60

        EOF

    - name: 🧪 Run Training Script
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          cd azure-vm-auto-python
          python3 main.py
        EOF

    - name: ⬆️ Push Model to GitHub
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          cd azure-vm-auto-python
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/Vipul-Babhare/azure-vm-auto-python.git
          git add models/ plots/
          git commit -m "✅ Auto-commit: trained model + plots from pipeline" || true
          git push origin main || true
        EOF

    - name: 🐳 Install Docker & Serve Model
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          cd azure-vm-auto-python
          sudo docker rm -f tf-serving || true
          sudo docker run -d --rm \
            -p 8501:8501 \
            --name=tf-serving \
            -v \$PWD/models/my_model:/models/my_model \
            -e MODEL_NAME=my_model \
            tensorflow/serving
        EOF

    - name: 🛠️ Replace Private IP in Prometheus Template
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          cd azure-vm-auto-python
          PRIVATE_IP=$(hostname -I | awk '{print $1}')
          sed "s/{{PRIVATE_IP}}/\$PRIVATE_IP/g" monitoring/prometheus.template.yml > monitoring/prometheus.yml
        EOF

    - name: 📊 Start Prometheus + Grafana Stack
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i key.pem azureuser@${{ env.VM_IP }} << 'EOF'
          cd azure-vm-auto-python

          sudo docker pull prom/prometheus
          sudo docker pull prom/node-exporter
          sudo docker pull gcr.io/cadvisor/cadvisor
          sudo docker pull grafana/grafana

          sudo docker rm -f node-exporter cadvisor prometheus grafana || true

          sudo docker run -d --name node-exporter -p 9100:9100 prom/node-exporter

          sudo docker run -d --name cadvisor -p 9323:8080 \
            -v /:/rootfs:ro \
            -v /var/run:/var/run:ro \
            -v /sys:/sys:ro \
            -v /var/lib/docker/:/var/lib/docker:ro \
            -v /dev/disk/:/dev/disk:ro \
            gcr.io/cadvisor/cadvisor

          sudo docker run -d --name prometheus -p 9090:9090 \
            -v \$PWD/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus

          sudo docker run -d --name grafana -p 3000:3000 grafana/grafana
        EOF
